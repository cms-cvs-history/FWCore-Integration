
# path1 even pass
# path2 1:40 pass

# Read events from the file created by testSelectEventsPROD.cfg
# (which were initially created  by testSelectEventsHLT.cfg)
# Perform tests exercising the SelectEvents feature of the
# OutputModule (SewerModule is derived from OutputModule).
# In particular, we are testing the process name specification
# that can be included in a SelectEvents statement.  Other
# tests exercise of parts of SelectEvents (EventSelector_t.cpp
# exercises the EventSelector class, testBitsFail.cfg and
# testBitsCount.cfg (among others) test SelectEvents when all
# paths are from the current process.

process TEST  = {

  service = MessageLogger
  {
    untracked vstring destinations = { "cerr", "cout" }
    untracked PSet cerr = { untracked string threshold = "WARNING" }
    untracked PSet cout = { untracked string threshold = "WARNING" }
  }

  untracked  PSet options = {
    untracked bool wantSummary=true
    include "FWCore/Framework/test/cmsExceptionsFatalOption.cff"
  }

  source = PoolSource {
    untracked vstring fileNames = {"file:testSelectEventsPROD.root"}
  }

  module f1 = TestFilterModule {
    untracked bool onlyOne = true
    untracked int32 acceptValue = 2
  }

  module f2 = TestFilterModule {
    untracked bool onlyOne = false
    untracked int32 acceptValue = 40
  }

  module a = TestTriggerNames {
    untracked vstring trigPaths = { "path1", "path2", "path3", "path4",
                                    "path5", "path6", "path7", "path8" }
    untracked vstring trigPathsPrevious = { "p1", "p2" }
    untracked bool dumpPSetRegistry = false
  }

  module out1 = SewerModule {
    string name = "out1"
    int32 shouldPass = 60
    untracked PSet SelectEvents = { 
      vstring SelectEvents = { "p02:HLT",
                               " p03 	: 	HLT",
                               "p2:PROD",
                               "path1:TEST" }
    }
  }

  module out2 = SewerModule {
    string name = "out2"
    int32 shouldPass = 98
    untracked PSet SelectEvents = { 
      vstring SelectEvents = { 
        "*:HLT"
      }
    }
  }

  module out3 = SewerModule {
    string name = "out3"
    int32 shouldPass = 89
    untracked PSet SelectEvents = { 
      vstring SelectEvents = { 
        "!*:PROD"
      }
    }
  }

  path path1 = { f1 }
  path path2 = { f2 }
  path path3 = { f1 }
  path path4 = { f2 }
  path path5 = { f1 }
  path path6 = { f2 }
  path path7 = { f1 }
  path path8 = { f2, a }

  endpath e = { out1 & out2 & out3 }
}
